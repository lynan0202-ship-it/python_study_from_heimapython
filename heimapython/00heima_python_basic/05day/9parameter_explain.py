"""
函数 参数 解释:
    概述:
        定义函数的时候, 写的参数叫: 形式参数, 简称: 形参, 形容调用 函数 需要传入什么值.
        调用函数的时候, 写的参数叫: 实际参数, 简称: 实参, 表示 实际参与运算的数据.
"""

# 需求: 定义 get_sum()函数, 用于计算两个整数的和.

# 写法1: 无参, 无返回值的函数.
# 定义函数
def get_sum1():
    a, b = 10, 20
    sum = a + b
    print(f'求和结果为: {sum}')

# 调用函数
get_sum1()
print('-' * 28)


# 虽然上述的操作已经实现了需求, 但是不够灵活, 上述的函数属于把两个数值写"死"了, 只能计算10 和 20的结果.
# 如果我们想计算任意两个整数的和, 如何实现呢?
# 写法2: 有参, 无返回值的函数.
# 定义函数
def get_sum2(a, b):                 # 形参, 形容调用函数需要给什么值, 给几个.   钱, 饮料名
    """
    该函数用于计算两个整数和
    :param a: 求和计算的第1个整数
    :param b: 求和计算的第2个整数
    :return: 无
    """
    sum = a + b
    print(f'求和结果为: {sum}')

# 调用函数
get_sum2(11, 22)    # 33,       11 和 22 叫 实际参数(实参), 表示实际参与运算的数据.   10元, 苏打水

c, d = 100, 200
get_sum2(c, d)            # 300       c(100), d(200) 叫实参, 表示实际参与运算的数据.  5元, 娃哈哈矿泉水


# 虽然上述的操作已经实现了需求, 但是不够灵活, 因为上述 求和计算完毕后, 是直接把 求和结果 打印出来了.
# 并没有赋值给变量, 如果未来要对 求和结果做其它的操作, 例如: 和另一个值相加, 比较等, 就实现不了了.
# 可以采用 返回值的 思路解决, 即: 把 两个整数的求和结果当做返回值 进行返回.