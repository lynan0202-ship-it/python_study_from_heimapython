"""
引用 介绍:
    概述:
        Python中的引用 指的是 地址值,即: 变量在内存中的位置(地址).
    格式:
        id(变量名)         可以查看变量在内存中的地址.
    细节:
        1. Python中只有 引用传递, 即: 我们以前看到的所有赋值动作, 都是把 地址值拷贝(赋值)过去.
        2. 区分 可变 和 不可变类型的依据: 在不改变地址值的情况下, 是否可以修改变量的内容, 可以: 可变类型, 不可以: 不可变类型.
            可变:     列表, 字典, 集合.
            不可变:   int, float, bool, str, 元组
        3. 观察如下的代码, 分析程序结果:
            形参是可变类型:    形参的可变直接影响实参.
            形参是不可变类型:  形参的改变对实参没有任何影响.
"""

# 案例1: 查看变量的地址值.
a = 10
b = a
c = a

print(id(a))    # 140714022086720, 说明: 10在内存中就1份, abc分别指向它.
print(id(b))    # 140714022086720, 说明: 10在内存中就1份, abc分别指向它.
print(id(c))    # 140714022086720, 说明: 10在内存中就1份, abc分别指向它.
print('-' * 28)

# 案例2: 演示可变 和 不可变类型.
# 场景1: 可变类型, 即: 在不改变地址值的情况下, 可以修改里边的元素内容.
list1 = [1, 2, 3]
print(f'list1 修改前元素值: {list1}')
print(f'list1 修改前地址值: {id(list1)}')     # 2525712470976
# 修改list1的元素.
list1.append(100)
list1[1] = 200
print(f'list1 修改后元素值: {list1}')
print(f'list1 修改后地址值: {id(list1)}')     # 2525712470976
print('-' * 28)

# 场景2: 不可变类型, 即: 在不改变地址值的情况下, 不可以修改里边的元素内容.
s1 = 'abc'
print(f's1 修改前元素值: {s1}')
print(f's1 修改前地址值: {id(s1)}')     # 1374973319088
# 修改s1的元素.
s1 = 'xyz'
print(f's1 修改前元素值: {s1}')
print(f's1 修改前地址值: {id(s1)}')     # 1374973726448
print('-' * 28)