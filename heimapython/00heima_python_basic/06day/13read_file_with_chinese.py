"""
中文 解释:
    计算机底层存储, 操作, 运算数据, 都是采用数据的 二进制(补码)形式, 所以中文, 特殊符号, 数字, 英文字母底层都是要转成二进制的.
    后来科学家就提出了 码表的概念, 用来描述 字符 及其 对应的数字的关系.  例如: 'a' => 97,  'A' => 65, '0' => 48...
    最早的码表 ASCII码表记录的就是: 英文字母, 数字, 特殊符号及其对应的 数字的关系.
    后来随着计算机的普及, 各个国家都有了各个国家的 码表, 咱们国内使用最多的主要是 GBK系列, 1个中文 占 2个字节.
    后来有个组织就统计全世界各个国家的码表, 制定了一张"万国码", 也叫"统一码", 这就是: Unicode系列的码表, 例如: utf-8, utf-16, utf-32...

    总结:
        国内主要用 GBK码表, 1个中文占 2个 字节.
        国际通用码表 UTF-8, 1个中文占 3个字节.
        无论是什么码表, 英文字母, 数字, 特殊符号都只占1个字节.
        只要以后你遇到了乱码的情况, 不用想, 原因只会有1个: 编解码不一致.
"""

# 1. 打开文件.
# f = open('./data/a.txt', 'r')                 # r是字符形式读, 没写码表, 默认是按照: gbk 读.
# f = open('./data/a.txt', 'r', encoding='gbk')   # 效果同上
f = open('./data/a.txt', 'r', encoding='utf-8')   # 按照 utf-8 码表解析
g = open('./date/a.txt', 'r', encoding='utf-8')
# 以二进制形式来读
# f = open('./data/a.txt', 'rb')

# 2. 读取文件内容.
print(f.read())
print(g.read())
# 3. 关闭文件.
f.close()
g.close()