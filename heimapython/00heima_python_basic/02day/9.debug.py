"""
Debug断点调试:
    概述:
        它不仅可以帮助我们 排查程序的错误,  还可以辅助我们快速上手, 了解项目业务逻辑.
    使用步骤:
        1. 加断点.
            原则: 哪里不会点哪里.
        2. 启动调试.
            右键 => Debug as ...
        3. 看哪里.
            下左: MainThread,  可以查看程序当前执行到哪里了.
            下中: Variables,  可以查看变量的变化过程.
            下右: Console,    可以查看程序的执行结果.
        4. 如何进行下一步调试.
            F7: 逐过程调试, 即: 遇到我们自己写的函数, 会跳转到函数内部.
            F8: 逐行调试, 即: 即使遇到我们自己写的函数, 也只是当做一行代码来处理, 不会进入到函数内部...
            F9: 逐断点调试, 即: 直接跳转到下一个断点. 如果当前断点已经是最后1个断点, 再次按下F9, 会一次性执行完后续所有的代码.
        5. 如何结束调试.
            场景1: 调试完.
            场景2: 手动终止.
            场景3: 最后1个断点的情况, 直接按F9
        6. 如何删除断点.
            场景1: 再次点击即可.
            场景2: 点击 break points 图表, 移除断点.
"""
# 需求: 求3个整数的最大值.
# c, d, e = 10, 20, 15

c = 10
d = 20
e = 15

# 场景1: if.else实现
if c >= d:
    # c大, 比较 c 和 e
    if c >= e:
        max1 = c
    else:
        max1 = e
else:
    # d大, 比较 d 和 e
    if d >= e:
        max1 = d
    else:
        max1 = e
print(f'最大值为: {max1}')
print('hello 1')
print('hello 2')
print('hello 3')
print('hello 4')
print('hello 5')