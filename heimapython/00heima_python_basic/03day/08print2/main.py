# 导入处理JSON文件的工具
import json


def 读取参数文件(文件路径):
    """从本地JSON文件中读取查询需要的参数"""
    # 尝试打开文件（处理"文件找不到"的错误）
    try:
        # 用"读"模式打开文件，指定编码为utf-8（避免中文乱码）
        with open(文件路径, 'r', encoding='utf-8') as 文件:
            # 把JSON内容转成Python字典（键值对格式，方便取值）
            参数 = json.load(文件)
            return 参数
    except FileNotFoundError:
        # 如果文件不存在，提示用户
        print(f"错误：找不到'{文件路径}'这个文件，请检查路径是否正确！")
        return None  # 返回空，表示读取失败


def 生成查询语句(参数):
    """根据读取到的参数，生成最终的SQL查询语句"""
    # SQL模板：固定的查询结构，变化的部分用%s占位（防止SQL注入）
    # 解释：查询users表中的id、用户名、注册时间，条件是状态、日期、国家，按注册时间倒序，限制条数
    sql模板 = """
              SELECT user_id, username, created_at
              FROM users
              WHERE status = %s      -- 对应"用户状态"
                AND created_at >= %s -- 对应"开始日期"
                AND country IN ({})  -- 对应"目标国家"（这里的{}会替换成多个%s）
              ORDER BY created_at DESC
                  LIMIT %s -- 对应"最多查几条" \
              """

    # 处理"目标国家"的占位符：有几个国家就需要几个%s，用逗号隔开
    # 比如国家是["US","CN"]，就生成"%s,%s"
    国家列表 = 参数["目标国家"]
    国家占位符 = ','.join(['%s'] * len(国家列表))  # 生成和国家数量匹配的%s,%s...

    # 把国家占位符填入SQL模板，得到完整的查询语句
    完整sql = sql模板.format(国家占位符)
    return 完整sql


def 准备执行参数(参数):
    """整理需要传给数据库的参数（顺序要和SQL中的%s对应）"""
    # SQL中%s的顺序是：状态→日期→国家1→国家2→...→限制条数
    # 用元组存储（元组不可修改，更安全）
    执行参数 = (
        参数["用户状态"],  # 第一个%s
        参数["开始日期"],  # 第二个%s
        *参数["目标国家"],  # 解包国家列表，比如["US","CN"]会变成"US","CN"，对应后面的%s
        参数["最多查几条"]  # 最后一个%s
    )
    return 执行参数


# 主程序：按步骤执行
if __name__ == "__main__":
    # 1. 读取参数文件（这里假设文件和代码在同一个文件夹）
    参数 = 读取参数文件("params.json")
    if 参数 is None:  # 如果读取失败，就不再继续
        exit()  # 退出程序

    # 打印读取到的参数，方便查看是否正确
    print("读取到的查询参数：")
    print(参数)
    print("-" * 50)  # 分隔线，让输出更清晰

    # 2. 生成SQL查询语句
    sql语句 = 生成查询语句(参数)
    print("生成的SQL查询：")
    print(sql语句)
    print("-" * 50)

    # 3. 准备传给数据库的参数
    执行用的参数 = 准备执行参数(参数)
    print("传给数据库的参数（顺序和SQL中的%s对应）：" % 执行用的参数)