# 字典与机器人控制矩阵示例：用字典管理机器人部件状态
# 核心思路：用"键"表示机器人部件名称（如关节、传感器），用"值"表示部件状态（如角度、读数）


# 1. 定义机器人控制字典（创建字典）
# 例子：机器人关节角度字典（键=关节名称，值=当前角度）
robot_joints = {
    "左臂关节": 90,   # 左臂当前弯曲90度
    "右臂关节": 45,   # 右臂当前弯曲45度
    "左腿关节": 180,  # 左腿伸直（180度为伸直状态）
    "右腿关节": 120   # 右腿弯曲120度
}

# 创建空字典（可后续添加数据，比如传感器数据）
empty_sensors = {}  # 空字典方式1
robot_sensors = dict()  # 空字典方式2（和上一行效果相同）

# 打印初始字典，观察结构
print("1. 初始机器人关节状态：")
print(robot_joints)  # 输出所有关节及角度
print("空传感器字典：", empty_sensors)
print("字典的数据类型：", type(robot_joints))  # 验证是dict类型
print("-" * 50)
'''
1. 初始机器人关节状态：
{'左臂关节': 90, '右臂关节': 45, '左腿关节': 180, '右腿关节': 120}
空传感器字典： {}
字典的数据类型： <class 'dict'>
--------------------------------------------------
'''

# 2. 增：给机器人添加新部件（新增键值对）
# 场景：机器人新增"头部关节"，初始角度0度（正对前方）
robot_joints["头部关节"] = 0  # 键不存在时，自动添加该键值对
print("2. 添加头部关节后：")
print(robot_joints)  # 此时字典中会多一个"头部关节":0
print("-" * 50)
'''
2. 添加头部关节后：
{'左臂关节': 90, '右臂关节': 45, '左腿关节': 180, '右腿关节': 120, '头部关节': 0}
'''


# 3. 改：修改机器人部件状态（更新已有键的值）
# 场景：右臂关节需要调整到60度（更弯曲）
robot_joints["右臂关节"] = 60  # 键已存在时，会覆盖原有值
print("3. 修改右臂关节角度后：")
print(robot_joints)  # 观察"右臂关节"的值从45变为60
print("-" * 50)
'''
3. 修改右臂关节角度后：
{'左臂关节': 90, '右臂关节': 60, '左腿关节': 180, '右腿关节': 120, '头部关节': 0}
--------------------------------------------------
'''

# 4. 查：查询机器人部件状态（获取值）
# 4.1 查单个部件状态（用get方法，找不到时返回默认值）
left_arm_angle = robot_joints.get("左臂关节")  # 查存在的键
print("4. 左臂关节当前角度：", left_arm_angle)  # 输出90

# 查不存在的部件（比如"手指关节"，默认返回"未安装"）
finger_status = robot_joints.get("手指关节", "未安装")
print("手指关节状态：", finger_status)  # 输出"未安装"（避免报错）

# 4.2 查所有部件名称（键）
all_joint_names = robot_joints.keys()
print("所有关节名称：", all_joint_names)  # 输出dict_keys([...])

# 4.3 查所有部件状态（值）
all_joint_angles = robot_joints.values()
print("所有关节角度：", all_joint_angles)  # 输出dict_values([...])

print("-" * 50)
'''
4. 左臂关节当前角度： 90
手指关节状态： 未安装
所有关节名称： dict_keys(['左臂关节', '右臂关节', '左腿关节', '右腿关节', '头部关节'])
所有关节角度： dict_values([90, 60, 180, 120, 0])
--------------------------------------------------
'''

# 5. 删：删除机器人废弃部件（移除键值对）
# 场景：左腿关节损坏，移除其数据
del robot_joints["左腿关节"]  # 按键删除
print("5. 删除左腿关节后：")
print(robot_joints)  # 此时字典中已无"左腿关节"
'''
5. 删除左腿关节后：
{'左臂关节': 90, '右臂关节': 60, '右腿关节': 120, '头部关节': 0}
--------------------------------------------------
'''
# （可选）清空所有数据（谨慎使用！会删除所有键值对）
# robot_joints.clear()
# print("清空所有关节数据后：", robot_joints)  # 输出{}
print("-" * 50)


# 6. 遍历：检查所有部件状态（逐个获取所有键值对）
# 6.1 方式1：先遍历键，再通过键查值（按"部件名"找"状态"）
print("6. 遍历方式1（按关节名查角度）：")
for joint_name in robot_joints.keys():  # 遍历所有关节名称
    angle = robot_joints.get(joint_name)  # 用关节名查角度
    print(f"{joint_name} 当前角度：{angle}度")

# 6.2 方式2：直接遍历键值对（同时获取"部件名"和"状态"）
print("\n6. 遍历方式2（直接获取关节和角度）：")
for joint, angle in robot_joints.items():  # items()返回所有键值对，用拆包获取
    print(f"{joint} 角度：{angle}度")  # 更简洁的写法