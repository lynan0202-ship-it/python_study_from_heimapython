numbers = [11, 22, 33, 44, 55]

# 直接遍历元素
for num in numbers:
    print(f'当前数字: {num}')
print(f'numberslen: {len(numbers)}')
# while循环 + 索引
i = 0
while i < len(numbers):
    print(f'索引{i}的值: {numbers[i]}')
    i += 1

# for循环 + 索引
for i in range(len(numbers)):
    print(f'索引{i}的值: {numbers[i]}')

"""
len()
`len()`函数的核心作用是一致的：统计对象所包含的“基本单元”的数量。不过，由于不同数据类型的“基本单元”定义不同，它在具体场景中的计数对象会有差异：

对于列表，`len(列表)`统计的是列表中元素的总个数，无论元素本身是数字、字符串还是嵌套的列表等，每个独立元素都算一个。比如`len([1, 2, [3,4]])`的结果是3，因为列表里有3个元素。

对于字符串，`len(字符串)`统计的是字符串中字符的总数，包括空格、标点等所有单个字符。例如`len("hi! 你好")`的结果是6，因为包含“h”“i”“!”“ ”“你”“好”这6个字符。

对于元组，`len(元组)`和列表类似，统计的是元组中元素的总个数。元组是不可变的，但计数方式和列表一致，比如`len((10, "test", False))`的结果是3，因为元组里有3个元素。

对于字典，`len(字典)`统计的是字典中键值对的数量，也就是“键”的个数（每个键对应一个值，共同构成一个键值对）。比如`len({"id": 1, "name": "Tom"})`的结果是2，因为字典里有2个键值对。

简单说，`len()`始终是在“数个数”，只是不同数据类型里“数的对象”不一样，这是由它们各自的结构决定的。

"""